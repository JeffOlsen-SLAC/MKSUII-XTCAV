-----------------------------------------------------------------
--                                                             --
-----------------------------------------------------------------
--
--	eDipTFT43_Intf.vhd - 
--
--	Copyright(c) SLAC National Accelerator Laboratory 2000
--
--	Author: JEFF OLSEN
--	Created on: 8/19/2011 8:28:28 AM
--	Last change: JO 8/19/2011 9:20:40 AM
--
----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    14:40:10 11/16/2010 
-- Design Name: 
-- Module Name:    eDipTFT43_intf - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Commentslibrary IEEE;
Library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use ieee.numeric_std.all;

Library work;
use work.mksuii.all;

--
----------------------------------------------------------------------------------

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity eDipTFT43_intf is
Port ( 
	Clock 		: in  std_logic;
	Reset 		: in  std_logic;

-- Link
	Lnk_Addr 	: in  std_logic_vector(15 downto 0);
	Lnk_Wr	 	: in  std_logic;
	Lnk_DataIn 	: in  std_logic_vector(15 downto 0);
	Reg_DataOut : out  std_logic_vector(15 downto 0);

	clk400KhzEn	: in 	std_logic;

	Refresh		: in 	std_logic;

-- Display update
	Refresh		: in std_logic;
	TxDone		: out std_logic;
	x1				: in  std_logic_vector(15 downto 0);
	y1				: in  std_logic_vector(15 downto 0);
	x2				: in  std_logic_vector(15 downto 0);
	y2				: in  std_logic_vector(15 downto 0);
	Data			: in string(8 downto 1);
	
	SPI_SS 		: out std_logic;
	SPI_Clk 		: out std_logic;
	SPI_MOSI 	: out std_logic;
	SPI_MISO 	: in  std_logic;
	SBUF			: in  std_logic;
	FPD_Reset	: out std_logic;
	FPD_DPOM		: out std_logic;
	FPD_DldEn	: out std_logic
	
);
end eDipTFT43_intf;

architecture Behavioral of eDipTFT43_intf is


type State_t is
(
	Idle_s,
	Clk_s,
	TermClk_s,
	TermSS_s,
	Ack_Del1_s,
	Ack_Del2_s,
	Term_s
	);

type Display_t is
(
	Wait_NewData_s,
	Write_Fifo_s
);


signal State 			: State_t;
signal DisplayState	: Display_t;
signal Cntr  			: std_logic_vector(11 downto 0);
signal iSS				: std_logic;
signal iClk				: std_logic;
signal iMOSI			: std_logic;
signal iMISO			: std_logic;
signal Tx_Start_Req	: std_logic;
signal Tx_Start_Clr	: std_logic;
signal Rx_Start_Req	: std_logic;
signal Rx_Start_Clr	: std_logic;
signal DataOutSr  	: std_logic_vector(7 downto 0);
signal DataInSr  		: std_logic_vector(7 downto 0);
signal BitCntr  		: std_logic_vector(2 downto 0);
signal DataLatch 		: std_logic_vector(7 downto 0);

signal rd_Fifo			: std_logic;
signal Fifo_Din 		: std_logic_vector(7 downto 0);
signal Fifo_Dout 		: std_logic_vector(7 downto 0);
signal Display_Data	: std_logic_vector(7 downto 0);
signal Display_Cnt	: std_logic_vector(7 downto 0);
signal full				: std_logic;
signal empty			: std_logic;
signal d_Rd_Fifo		: std_logic;
signal iRd_Fifo		: std_logic;
signal ACK_Start_Req	: std_logic;
signal ACK_Rd			: std_logic;
signal ByteCntr		: std_logic_vector(15 downto 0);
signal NumBytes		: std_logic_vector(15 downto 0);
signal DisplayChksum	: std_logic_vector(15 downto 0);
signal FF_Reset		: std_logic;
signal Reset_Fifo		: std_logic;
signal cmd_Reset		: std_logic;
signal cmd_DPOM		: std_logic;
signal cmd_Enable		: std_logic;
signal Mem_Wr			: std_logic;
signal Display_Wr		: std_logic;

begin

SPI_MOSI	 	<= iMOSI;
SPI_SS 		<= iSS;
SPI_Clk		<= iClk;

FPD_Reset	<= cmd_Reset;
FPD_DPOM		<= cmd_DPOM;
FPD_DldEn	<= cmd_Enable;

iMISO			<= SPI_MISO;
--iMISO		<= iMOSI;

FF_Reset 	<= Reset OR Reset_Fifo OR cmd_Reset;

Reg_DataOut(15 downto 14) 	<= "00";
Reg_DataOut(13) 				<= not(cmd_Enable);
Reg_DataOut(12)				<= cmd_Enable;
Reg_DataOut(11) 				<= not(cmd_DPOM);
Reg_DataOut(10) 				<= cmd_DPOM;
Reg_DataOut(9) 				<= not(cmd_Reset);
Reg_DataOut(8) 				<= cmd_Reset;

Mux_p : process(Lnk_wr, Lnk_Addr, cmd_Enable, Display_Wr, Display_Cnt)
begin
if (Lnk_Wr = '1') then
	if Lnk_Addr(8 downto 0) = x"100" then
		Fifo_Din	<= (Others => '0');
		Mem_Wr 	<= '0';
	else
		Fifo_Din	<= Lnk_DataIn(7 downto 0);
		Mem_Wr	<= '1';
	end if;
else
	Mem_Wr 		<= Display_Wr;
	case Display_Cnt is 
		when x"00" => Fifo_Din <= x"11";  -- DC1 Character
		when x"01" => Fifo_Din <= x"23";  -- Len always 35
		when x"02" => Fifo_Din <= x"1B";  -- Esc 
		when x"03" => Fifo_Din <= x"54";  -- Z
		when x"04" => Fifo_Din <= x"42";  -- B
		when x"05" => Fifo_Din <= x1(7 downto 0);  
		when x"06" => Fifo_Din <= x1(15 downto 8);  
		when x"07" => Fifo_Din <= y1(7 downto 0);  
		when x"08" => Fifo_Din <= y1(15 downto 8);  
		when x"09" => Fifo_Din <= x2(7 downto 0);  
		when x"0A" => Fifo_Din <= x2(15 downto 8);  
		when x"0B" => Fifo_Din <= y2(7 downto 0);  
		when x"0C" => Fifo_Din <= y2(15 downto 8);  
		when x"0D" => Fifo_Din <= x"07";  -- 7, Bottom Left orientation
		when x"0E" => Fifo_Din <= Character_to_StdLogicVector(Data(8));
		when x"0F" => Fifo_Din <= Character_to_StdLogicVector(Data(7));
		when x"10" => Fifo_Din <= Character_to_StdLogicVector(Data(6));
		when x"11" => Fifo_Din <= Character_to_StdLogicVector(Data(5));
		when x"12" => Fifo_Din <= Character_to_StdLogicVector(Data(4));
		when x"13" => Fifo_Din <= Character_to_StdLogicVector(Data(3));
		when x"14" => Fifo_Din <= Character_to_StdLogicVector(Data(2));
		when x"15" => Fifo_Din <= Character_to_StdLogicVector(Data(1));
		when x"16" => Fifo_Din <= x"00"; -- Null Termination
		when x"17" => Fifo_Din	<= DisplayChksum(7 downto 0);
		when others => 
		end case;
end if;
end process;

Cntl_p : process(Clock, Reset)
begin
if (Reset = '1') then
	cmd_Reset 	<= '0';
	cmd_DPOM 	<= '0';
	cmd_Enable 	<= '0';
elsif (Clock'event and Clock = '1') then
	If ((Lnk_Wr = '1') and (Lnk_Addr(8 downto 0) = x"100")) then
		case Lnk_DataIn(9 downto 8) is
			when RegSet => cmd_Reset <= '1';
			when others =>
		end case;
		
		case Lnk_DataIn(11 downto 10) is
			when RegSet => cmd_DPOM <= '1';
			when RegClr	=> cmd_DPOM <= '0';
			when others =>
		end case;
		
		case Lnk_DataIn(13 downto 12) is
			when RegSet => cmd_Enable <= '1';
			when RegClr	=> cmd_Enable <= '0';
			when others =>
		end case;
		
		case Lnk_DataIn(15 downto 14) is
			when RegSet => cmd_Refresh <= '1';
			when others =>
		end case;
	else
		Cmd_Reset 		<= '0';
		cmd_Refresh 	<= '0';
	end if;
end if;
end process;

DisplayWr_p : process(Clock, Reset)
Begin
if (Reset = '1') then
	Display_Wr 		<= '0';
	Display_Cnt 	<= x"00";
	DisplayState 	<= Wait_NewData_s;
elsif (Clock'event and Clock = '1') then
	Case DisplayState is
		when Wait_NewData_s =>
			Display_Cnt 	<= (Others => '0');
			if ((cmd_Refresh = '1') or (Refresh = '1')) then
				Display_Wr 		<= '1';
				DisplayChksum 	<=	x"0000";  
				DisplayState 	<= Write_Fifo_s;
			else
				DisplayState 	<= Wait_NewData_s;
			end if;
			
		when Write_Fifo_s =>
			if (Display_Cnt < x"17") then
				DisplayChkSum	<= DisplayChkSum + Fifo_Din;
				Display_Cnt 	<= Display_Cnt + 1;
				DisplayState 	<= Write_Fifo_s;
			else
				Display_Wr 		<= '0';
				DisplayState 	<= Wait_NewData_s;
			end if;
			
		when others => 
				DisplayState 	<= Wait_NewData_s;
	end case;
end if;
end process;

clken : process(Clock, Reset)
begin
if (Reset = '1') then
	Tx_Start_Req 	<= '0';
	Rx_Start_Req 	<= '0';
	Cntr 				<= (Others => '0');
	DataLatch		<= (Others => '0');
elsif (Clock'event and Clock = '1') then
	if (Empty = '0') then
		Tx_Start_Req 	<= '1';
	elsif (Tx_Start_Clr = '1') then
		Tx_Start_Req 	<= '0';
	end if;

	if (Rx_Start = '1') then
		Rx_Start_Req 	<= '1';
	elsif (Rx_Start_Clr = '1') then
		Rx_Start_Req 	<= '0';
	end if;
end if;
end process;

spi_p : Process(Clock, Reset)
begin
if (Reset = '1') then
	Tx_Start_Clr 	<= '0';
	Rx_Start_Clr 	<= '0';
	Ack_Start_Req 	<= '0';
	iSS				<= '0';
	iClk				<= '1';
	iMOSI				<= '0';
	TxDone 			<= '0';
	Rd_Fifo			<= '0';
	iRd_Fifo			<= '0';
	d_Rd_Fifo		<= '0';
	Reset_Fifo		<= '0';
	ACK_Rd			<= '0';
	DataOutSr 		<= (Others => '0');
	DataInSr 		<= (Others => '0');
	BitCntr			<= (Others => '0');
	ByteCntr			<= (Others => '0');
	NumBytes			<= (Others => '1');
	State 			<= Idle_s;
elsif (Clock'event and Clock = '1') then

	d_Rd_Fifo 	<= iRd_Fifo;
	Rd_Fifo  	<= not(d_Rd_Fifo) and iRd_Fifo;
	
	if (clk400KhzEn = '1') then
		case State is
		when Idle_s =>
			ACK_Rd			<= '0';
			Reset_Fifo		<= '0';
			Rx_Start_Clr 	<= '0';
			BitCntr			<= "111";
			if (Tx_Start_Req = '1') then
				Reg_DataOut(7 downto 0)	<= x"00";
				Rd_Fifo						<= '1';
				DataOutSr 					<= Fifo_Dout(6 downto 0) & '0';
				iMOSI 						<= Fifo_Dout(7);
				iSS							<= '1';
				if (ByteCntr = x"0001") then
					NumBytes <= x"00" & Fifo_Dout + 2;
				end if;
				State				<= Clk_s;
			elsif (Rx_Start_Req = '1')  then
				DataOutSr 		<= x"FF";
				iMOSI 			<= '1';
				iSS				<= '1';
				State				<= Clk_s;
			else
				iClk				<= '0';
				iSS   			<= '0';
				State				<= Idle_s;
			end if;
		
		when Clk_s =>
			Reset_Fifo		<= '0';
			Tx_Start_Clr 	<= '0';
			iRd_Fifo	<= '0';
			iClk 		<= Not(IClk);
			if (iClk = '1') then
				BitCntr 		<= BitCntr - 1;
				iMOSI 		<= DataOutSr(7);
				DataOutSr 	<= DataOutSr(6 downto 0) & '0' ;
				if (BitCntr = "000") then
					State <= TermClk_s;
				else
					State <= Clk_s;
				end if;
			end if;
			
			if (iClk = '1') then
				DataInSr		<= DataInSr(6 downto 0) & iMISO;
			end if;
				
		when TermClk_s =>
			--DataInSr			<=  DataInSr(6 downto 0) & iMISO;
			iMOSI 			<= '0';
			iClk 				<= '0';
			iSS				<= '0';
			State 			<= TermSS_s;		  	
				
		when TermSS_s =>
			iSS				<= '0';
			if ((ByteCntr = numBytes) and (Ack_Start_Req = '0')) then 
				Reset_Fifo		<= '1';
				Tx_Start_Clr 	<= '1';
				BitCntr			<= "111";
				DataOutSr 		<= x"FF";
				iMOSI 			<= '1';
				iSS				<= '1';
				ByteCntr 		<= (Others => '0');
				numBytes			<= (Others => '1');
				Ack_Start_Req 	<= '1';
				State				<= Ack_Del1_s;
			elsif  (Ack_Start_Req = '1') then
				Ack_Start_Req 					<= '0';
				TxDone							<= '1';
				Reg_DataOut(7 downto 0)		<= DataInSr;
				State 							<= Term_s;
			else
				ByteCntr 		<= ByteCntr + 1;
				State 			<= Term_s;
			end if;

		when Ack_Del1_s =>
				State 			<= Ack_Del2_s;
		
		when Ack_Del2_s =>
				State 			<= Clk_s;
		
		when Term_s =>
			TxDone			<= '0';
			Reset_Fifo		<= '0';
			Tx_Start_Clr 	<= '0';
			State 			<= Idle_s;
			
		when others =>
			State <= Idle_s;
			
		end case;
		
	end if;
end if;
end process;

u_Spi_Fiofo : SPI_Fifo
port map (
	clk 		=> Clock,
	rst 		=> FF_Reset,
	din 		=> Fifo_Din,
	wr_en 	=> Mem_Wr,
	rd_en 	=> Rd_Fifo,
	dout 		=> Fifo_dout,
	full 		=> full,
	empty		=> empty
	);

end Behavioral;

