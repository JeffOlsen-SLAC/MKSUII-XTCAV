-----------------------------------------------------------------
--                                                             --
-----------------------------------------------------------------
--
--	FrontPanel_LED - 
--
--	Copyright(c) SLAC 2000
--
--	Author: JEFF OLSEN
--	Created on: 3/9/2011 2:32:34 PM
--	Last change: JO 3/9/2011 3:25:49 PM
--
library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.std_logic_ARITH.ALL;
use IEEE.std_logic_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;


entity FrontPanel_LED is
Port (
	Clock 	  		: in std_logic;
	Reset 	  		: in std_logic;
	ClkEn				: in std_logic;

	Configured 		: in std_logic;
	Local		 		: in std_logic;
	LED_Test	  		: in std_logic;
	
	LED_Out	  		: out std_logic_vector(28 downto 0);

	ACCEL1			: in std_logic;
	ACCEL2			: in std_logic;
	WG_WATER1  		: in std_logic;
	WG_WATER2  		: in std_logic;
	KLY_WATER  		: in std_logic;
	WG_VAC_INTLK	: in std_logic;
	WG_VALVE			: in std_logic;
	KLY_VAC_INTLK	: in std_logic;
	KLY_DELTA_T		: in std_logic;	
	KLY_MAG_INTLK	: in std_logic;
	SLED_FAULT		: in std_logic;
	SLED_TUNE		: in std_logic;
	MOD_OV			: in std_logic;
	MOD_OI			: in std_logic;
	FWR_PWR 			: in std_logic;
	OFFLINE			: in std_logic;
	RF_PWR 			: in std_logic;
	MAINTENANCE		: in std_logic;
	TCVAC				: in std_logic;
	STANDBY 			: in std_logic;
	SPARE1 			: in std_logic;
	ACCELERATE 		: in std_logic;
	SPARE2 			: in std_logic;
	DRIVE_FAULT 	: in std_logic;
	MOD_AVAIL		: in std_logic;
	TRIGEN_Fault	: in std_logic;
	TRIGEN_FP		: in std_logic;
	TRIGEN_SW		: in std_logic;
	HEARTBEAT		: in std_logic;
	BATTERY_FAULT 	: in std_logic;
	FAULT_LIMIT 	: in std_logic
	);

end FrontPanel_LED;

architecture Behavioral of FrontPanel_LED is

signal Inputs 	: std_logic_vector(28 downto 0);
signal iFPLED 	: std_logic_vector(28 downto 0);
signal TrigEn  : std_logic;
signal Blink   : std_logic;

begin

TrigEn <= NOT(TRIGEN_Fault) OR NOT(TRIGEN_FP) OR NOT(TRIGEN_SW);

LED_Out		<= iFPLED;

Inputs(0) 	<= ACCEL1;
Inputs(1) 	<= ACCEL2;
Inputs(2) 	<= WG_WATER1;
Inputs(3) 	<= WG_WATER2;
Inputs(4) 	<= KLY_WATER;
Inputs(5) 	<= WG_VAC_INTLK;
Inputs(6) 	<= WG_VALVE;
Inputs(7) 	<= KLY_VAC_INTLK;
Inputs(8) 	<= KLY_DELTA_T;
Inputs(9) 	<= KLY_MAG_INTLK;
Inputs(10)	<= SLED_FAULT;
Inputs(11)	<= SLED_TUNE;
Inputs(12)	<= MOD_OV;
Inputs(13)	<= MOD_OI;
Inputs(14)	<= FWR_PWR;
Inputs(15)	<= OFFLINE;
Inputs(16)	<= RF_PWR;
Inputs(17)	<= MAINTENANCE;
Inputs(18)	<= TCVAC;
Inputs(19)	<= STANDBY;
Inputs(20)	<= SPARE1;
Inputs(21)	<= ACCELERATE;
Inputs(22)	<= SPARE2;
Inputs(23)	<= DRIVE_FAULT;
Inputs(24)	<= MOD_AVAIL;
Inputs(25)	<= TrigEn;
Inputs(26)	<= HEARTBEAT;
Inputs(27)	<= BATTERY_FAULT;
Inputs(28)	<= FAULT_LIMIT;

FPLED_p : process(Clock, Reset)
Begin
if (reset = '1') then
	Blink 	<= '0';
  	iFPLED 	<= "00000000000000000000000000001";
elsif (Clock'event and 	Clock = '1') then
	if (ClkEn = '1') then
		if (LED_Test = '1') then
			if (Blink = '0') then
				Blink 	<= '1';
				iFPLED	<= (Others => '1');
			else
				iFPLED 	<= NOT(iFPLED);
			end if;
		elsif ((Configured = '0') and (Local = '0')) then
			iFPLED 	<=  iFPLED(27 downto 0) & (iFPLED(28) XOR iFPLED(7) XOR iFPLED(2) XOR NOT(iFPLED(15));
		else
			Blink 	<= '0';
			iFPLED	<=	 Inputs;
		end if;
	end if;
end if;
end process;

end Behavioral;